<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:p="http://www.springframework.org/schema/p" xmlns:util="http://www.springframework.org/schema/util"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
            http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd
            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
	   default-autowire="byName" default-lazy-init="false">
	<!-- mybatis集成到spring中，即将mybatis的数据源、事物交给spring代理 -->

	<!--载入配置文件 -->
	<context:property-placeholder location="classpath:database.properties" />
	<!-- 数据源配置 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name ="driverClassName" value="${driverClassName}"/>
		<property name ="url" value="${url}"/>
		<property name ="username" value="${username}"/>
		<property name ="password" value="${password}"/>
		<property name ="maxActive" value="${maxActive}"/>
		<property name ="maxIdle" value="${maxIdle}"/>
	</bean>
	<!-- 事物管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 集成mybatis -->
	<bean id="sqlSessionFactoryBeanName" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!--dataSource属性指定要用到的连接池-->
		<property name="dataSource" ref="dataSource" />
		<!--configLocation属性指定mybatis的核心配置文件-->
		<property name="configLocation" value="classpath:configure.xml" />
		<!-- 所有配置的mapper文件 -->
		<property name="mapperLocations" value="classpath*:dao/*.xml" />
	</bean>
	<!-- 将接口与对应的mapper的xml文件对应起来 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="dao" />
	</bean>
	
	<!-- <aop:aspectj-autoproxy proxy-target-class="true"/>
    <bean id="validInterceptor" class="controller.Aoptest" />
    <aop:config>
       <aop:pointcut id="validPoint" expression="execution(public * controller.*.*(..)) "/>
       <aop:advisor pointcut-ref="validPoint" advice-ref="validInterceptor"/>
     </aop:config>  -->

	<!--shiro配置-->
	<!--
    1. 配置 SecurityManager!
    -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="cacheManager" ref="cacheManager"></property>
		<property name="authenticator" ref="authenticator"></property>
		<property name="realms">
			<list>
				<ref bean="ibatisRealm"></ref>
			</list>
		</property>
	</bean>
	<!--
    2. 配置 CacheManager.
    2.1 需要加入 ehcache 的 jar 包及配置文件.
    -->
	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManager" ref="ehCacheManager"/>
	</bean>
	<bean id="ehCacheManager" class ="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="classpath:ehcache.xml" />
		<property name="shared" value="true"></property>
	</bean>
	<!--认证策略，至少一个成功-->
	<bean id="authenticator" class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
		<property name="authenticationStrategy"><bean class="org.apache.shiro.authc.pam.FirstSuccessfulStrategy"></bean></property>
	</bean>
	<!--
    	3. 配置 Realm
    	3.1 直接配置实现了 org.apache.shiro.realm.Realm 接口的 bean
    -->
	<bean id="ibatisRealm" class="shiro.realms.ibatisRealm">
		<property name="credentialsMatcher">
			<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
				<property name="hashAlgorithmName" value="MD5"></property>
				<property name="hashIterations" value="1024"></property>
			</bean>
		</property>
	</bean>
	<!--
   4. 配置 LifecycleBeanPostProcessor. 可以自定的来调用配置在 Spring IOC 容器中 shiro bean 的生命周期方法.
   -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
	<!--
    5. 启用 IOC 容器中使用 shiro 的注解. 但必须在配置了 LifecycleBeanPostProcessor 之后才可以使用.
    -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"></bean>
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager"></property>
	</bean>
	<!--
    6. 配置 ShiroFilter.
    6.1 id 必须和 web.xml 文件中配置的 DelegatingFilterProxy 的 <filter-name> 一致.
                      若不一致, 则会抛出: NoSuchBeanDefinitionException. 因为 Shiro 会来 IOC 容器中查找和 <filter-name> 名字对应的 filter bean.
    -->
	<bean id="logoutFilter" class="org.apache.shiro.web.filter.authc.LogoutFilter">
		<property name="redirectUrl" value="/login.jsp"></property>
	</bean>
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager"></property>
		<property name="loginUrl" value="/mainkind/to_login.do"></property>
		<!--<property name="successUrl" value="/main.jsp"></property>-->
		<property name="unauthorizedUrl" value="/unautho.jsp"></property>
		<property name="filters">
			<util:map>
				<entry key="logout" value-ref="logoutFilter"></entry>
			</util:map>
		</property>
		<!--
        	配置哪些页面需要受保护.
        	以及访问这些页面需要的权限.
        	1). anon 可以被匿名访问
        	2). authc 必须认证(即登录)后才可能访问的页面.
        	3). logout 登出.
        	4). roles 角色过滤器
        -->
		<property name="filterChainDefinitions">
			<value>
				/mainkind/to_login.do=anon
				/mainkind/to_main.do=anon
				/js/**=anon
				/pages/**=anon
				/plugins/**=anon
				/img/**=anon
				/**=authc
			</value>
		</property>
	</bean>
</beans> 